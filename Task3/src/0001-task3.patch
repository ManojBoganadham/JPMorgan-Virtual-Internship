From 64029f654569999bff8c55e07cbdf850b2606138 Mon Sep 17 00:00:00 2001
From: Manoj Boganadham <manojbvs01@gmail.com>
Date: Thu, 2 Jul 2020 16:25:50 +0530
Subject: [PATCH] task3

---
 0001-Patch_File.patch        | 105 -----------------------------------
 Task3/src/DataManipulator.ts |  33 ++++-------
 Task3/src/Graph.tsx          |  27 ++++-----
 Task3/{ => src}/package.json |   0
 4 files changed, 21 insertions(+), 144 deletions(-)
 delete mode 100644 0001-Patch_File.patch
 rename Task3/{ => src}/package.json (100%)

diff --git a/0001-Patch_File.patch b/0001-Patch_File.patch
deleted file mode 100644
index 54c0c0d..0000000
--- a/0001-Patch_File.patch
+++ /dev/null
@@ -1,105 +0,0 @@
-From f0307f989319e991d41d7a1d48a01ce71667df48 Mon Sep 17 00:00:00 2001
-From: Manoj Boganadham <manojbvs01@gmail.com>
-Date: Tue, 30 Jun 2020 15:34:05 +0530
-Subject: [PATCH] 'Patch_File'
-
----
- Task2/src/App.tsx   | 24 ++++++++++++++++++------
- Task2/src/Graph.tsx | 11 ++++++++---
- 2 files changed, 26 insertions(+), 9 deletions(-)
-
-diff --git a/Task2/src/App.tsx b/Task2/src/App.tsx
-index 0728518..368a066 100644
---- a/Task2/src/App.tsx
-+++ b/Task2/src/App.tsx
-@@ -8,6 +8,7 @@ import './App.css';
-  */
- interface IState {
-   data: ServerRespond[],
-+  showGraph: boolean,
- }
- 
- /**
-@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
-       // data saves the server responds.
-       // We use this state to parse data down to the child element (Graph) as element property
-       data: [],
-+      showGraph: false,
-     };
-   }
- 
-@@ -29,18 +31,28 @@ class App extends Component<{}, IState> {
-    * Render Graph react component with state.data parse as property data
-    */
-   renderGraph() {
--    return (<Graph data={this.state.data}/>)
-+    if(this.state.showGraph){
-+      return (<Graph data={this.state.data}/>)
-+    }
-   }
- 
-   /**
-    * Get new data from server and update the state with the new data
-    */
-   getDataFromServer() {
--    DataStreamer.getData((serverResponds: ServerRespond[]) => {
--      // Update the state by creating a new array of data that consists of
--      // Previous data in the state and the new data from server
--      this.setState({ data: [...this.state.data, ...serverResponds] });
--    });
-+    let x = 0;
-+    const interval = setInterval(()=>{
-+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
-+        this.setState({ 
-+          data: serverResponds,
-+          showGraph: true,
-+         });
-+      });
-+      x++;
-+      if(x>1000){
-+        clearInterval(interval);
-+      }
-+    },100);
-   }
- 
-   /**
-diff --git a/Task2/src/Graph.tsx b/Task2/src/Graph.tsx
-index ec1430e..1d26766 100644
---- a/Task2/src/Graph.tsx
-+++ b/Task2/src/Graph.tsx
-@@ -14,7 +14,7 @@ interface IProps {
-  * Perspective library adds load to HTMLElement prototype.
-  * This interface acts as a wrapper for Typescript compiler.
-  */
--interface PerspectiveViewerElement {
-+interface PerspectiveViewerElement extends HTMLElement {
-   load: (table: Table) => void,
- }
- 
-@@ -32,7 +32,7 @@ class Graph extends Component<IProps, {}> {
- 
-   componentDidMount() {
-     // Get element to attach the table from the DOM.
--    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
-+    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
- 
-     const schema = {
-       stock: 'string',
-@@ -46,8 +46,13 @@ class Graph extends Component<IProps, {}> {
-     }
-     if (this.table) {
-       // Load the `table` in the `<perspective-viewer>` DOM reference.
--
-+      
-       // Add more Perspective configurations here.
-+      elem.setAttribute('view','y_line');
-+      elem.setAttribute('column-pivots','["stock"]');
-+      elem.setAttribute('row-pivots','["timestamp"]');
-+      elem.setAttribute('columns','["top_ask_price"]');
-+      elem.setAttribute('aggregates','{"stock":"distinct count","top_ask_price":"avg","top_bid_price":"avg","timestamp":"distinct count"}');
-       elem.load(this.table);
-     }
-   }
--- 
-2.27.0.windows.1
-
diff --git a/Task3/src/DataManipulator.ts b/Task3/src/DataManipulator.ts
index 743c4a9..f6b15ff 100644
--- a/Task3/src/DataManipulator.ts
+++ b/Task3/src/DataManipulator.ts
@@ -1,33 +1,20 @@
 import { ServerRespond } from './DataStreamer';
 
 export interface Row {
-  price_abc: number,
-  price_def: number,
-  ratio: number,
+  stock: string,
+  top_ask_price: number,
   timestamp: Date,
-  upper_bound: number,
-  lower_bound: number,
-  trigger_alert: number|undefined,
 }
 
 
 export class DataManipulator {
-  static generateRow(serverRespond: ServerRespond[]): Row {
-    const priceABC = (serverRespond[0].top_ask.price + serverRespond[0].top_bid.price)/2;
-    const priceDEF = (serverRespond[1].top_ask.price + serverRespond[1].top_bid.price)/2;
-    const ratio = priceABC/priceDEF;
-    const upperBound = 1+0.05;
-    const lowerBound = 1-0.05;    
-    return{
-        price_abc: priceABC,
-        price_def: priceDEF,
-        ratio,
-        timestamp: serverRespond[0].timestamp>serverRespond[1].timestamp ?
-          serverRespond[0].timestamp : serverRespond[1].timestamp,
-        upper_bound: upperBound,
-        lower_bound: lowerBound,
-        trigger_alert: (ratio > upperBound||ratio < lowerBound) ? ratio : undefined,
+  static generateRow(serverResponds: ServerRespond[]): Row[] {
+    return serverResponds.map((el: any) => {
+      return {
+        stock: el.stock,
+        top_ask_price: el.top_ask && el.top_ask.price || 0,
+        timestamp: el.timestamp,
       };
-    }
+    })
   }
-
+}
diff --git a/Task3/src/Graph.tsx b/Task3/src/Graph.tsx
index a7a09f0..58fb997 100644
--- a/Task3/src/Graph.tsx
+++ b/Task3/src/Graph.tsx
@@ -23,13 +23,10 @@ class Graph extends Component<IProps, {}> {
     const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
-      price_abc: 'float',
-      price_def: 'float',
-      ratio: 'float',
+      stock: 'string',
+      top_ask_price: 'float',
+      top_bid_price: 'float',
       timestamp: 'date',
-      upper_bound:'float',
-      lower_bound: 'float',
-      trigger_alert: 'float',
     };
 
     if (window.perspective && window.perspective.worker()) {
@@ -39,25 +36,23 @@ class Graph extends Component<IProps, {}> {
       // Load the `table` in the `<perspective-viewer>` DOM reference.
       elem.load(this.table);
       elem.setAttribute('view', 'y_line');
+      elem.setAttribute('column-pivots', '["stock"]');
       elem.setAttribute('row-pivots', '["timestamp"]');
-      elem.setAttribute('columns', '["ratio","lower_bound","upper_bound","trigger_alert"]');
+      elem.setAttribute('columns', '["top_ask_price"]');
       elem.setAttribute('aggregates', JSON.stringify({
-      price_abc: 'avg',
-      price_def: 'avg',
-      ratio: 'avg',
-      timestamp: 'distinct_count',
-      upper_bound:'avg',
-      lower_bound: 'avg',
-      trigger_alert: 'avg',
+        stock: 'distinctcount',
+        top_ask_price: 'avg',
+        top_bid_price: 'avg',
+        timestamp: 'distinct count',
       }));
     }
   }
 
   componentDidUpdate() {
     if (this.table) {
-      this.table.update([
+      this.table.update(
         DataManipulator.generateRow(this.props.data),
-      ]);
+      );
     }
   }
 }
diff --git a/Task3/package.json b/Task3/src/package.json
similarity index 100%
rename from Task3/package.json
rename to Task3/src/package.json
-- 
2.27.0.windows.1

